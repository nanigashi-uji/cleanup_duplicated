#!/bin/bash
# -*- mode: shell-script ; -*-
#
# cleanup_duplicated: Clean up the download folder by removing duplicated files.
#
#                by Uji Nanigashi (53845049+nanigashi-uji@users.noreply.github.com)
#                https://github.com/nanigashi-uji/cleanup_duplicated.git
#
#  When the same file is downloaded several times, Web-browsers store
#  the files by adding (1),(2),...  or -1,-2,... to the basename of
#  the downloaded files. This script seek the files with such suffix
#  and check if there is the former downloaded-file with the lower
#  suffix or the file without suffix. If it is same file, remove the
#  file with higher suffix.
#
#  Requirements: bash, find, sed, sort
#
#
function cleanup_duplicated () {
    # Prepare Help Messages
    local funcstatus=0
    local echo_usage_bk=$(declare -f echo_usage)
    local cleanup_bk=$(declare -f cleanup)
    local tmpfiles=()
    local tmpdirs=()

    function  echo_usage () {
        if [ "$0" == "${BASH_SOURCE:-$0}" ]; then
            local this=$0
        else
            local this="${FUNCNAME[1]}"
        fi
        echo "[Usage] % $(basename ${this}) [options]"              1>&2
        echo "[Options]"                                            1>&2
        echo "           -d path   : Set target directory"          1>&2
        echo "           -D depth  : Set search depth (defalut: 2)" 1>&2
        echo "           -i        : invoke rm with -i optiond"     1>&2
        echo "           -n        : \"Dryrun\"-mode"               1>&2
        echo "           -v        : Show verbose output"           1>&2
        echo "           -m num    : Set possible maximum index"    1>&2
        echo "           -h        : Show Help (this message)"      1>&2
        return
    }

    local hndlrhup_bk=$(trap -p SIGHUP)
    local hndlrint_bk=$(trap -p SIGINT) 
    local hndlrquit_bk=$(trap -p SIGQUIT)
    local hndlrterm_bk=$(trap -p SIGTERM)

    trap -- 'cleanup ; kill -1  $$' SIGHUP
    trap -- 'cleanup ; kill -2  $$' SIGINT
    trap -- 'cleanup ; kill -3  $$' SIGQUIT
    trap -- 'cleanup ; kill -15 $$' SIGTERM
    
    function cleanup () {
        
        # removr temporary files and directories
        if [ ${#tmpfiles} -gt 0 ]; then
            rm -f "${tmpfiles[@]}"
        fi
        if [ ${#tmpdirs} -gt 0 ]; then
            rm -rf "${tmpdirs[@]}"
        fi

        # Restore  signal handler
        if [ -n "${hndlrhup_bk}"  ] ; then eval "${hndlrhup_bk}"  ;  else trap --  1 ; fi
        if [ -n "${hndlrint_bk}"  ] ; then eval "${hndlrint_bk}"  ;  else trap --  2 ; fi
        if [ -n "${hndlrquit_bk}" ] ; then eval "${hndlrquit_bk}" ;  else trap --  3 ; fi
        if [ -n "${hndlrterm_bk}" ] ; then eval "${hndlrterm_bk}" ;  else trap -- 15 ; fi

        # Restore alias and functions

        unset echo_usage
        test -n "${echo_usage_bk}" && eval ${echo_usage_bk%\}}" ; }"

        unset cleanup
        test -n "${cleanup_bk}" && eval ${cleanup_bk%\}}" ; }"
    }

    # Analyze command line options
    local OPT=""
    local OPTARG=""
    local OPTIND=""
    local dest="${HOME}/Downloads" 
    local searchdepth=2
    local rmopt=""
    local dryrun=0
    local verbose=0
    local maxidx=300
    while getopts "d:D:ihnvm:" OPT
    do
        case ${OPT} in
            d) local dest=${OPTARG}
               ;;
            D) local searchdepth=${OPTARG}
               ;;
            i) local rmopt="-i ${rmopt}"
               ;;
            n) local dryrun=1
               ;;
            m) local maxidx=0
               ;;
            v) local verbose=1
               ;;
            h) echo_usage
               cleanup
               return 0
               ;;
            \?) echo_usage
                cleanup
                return 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    local scriptpath=${BASH_SOURCE:-$0}
    local scriptdir=$(dirname ${scriptpath})
    if [ "$0" == "${BASH_SOURCE:-$0}" ]; then
        local this=$(basename ${scriptpath})
    else
        local this="${FUNCNAME[0]}"
    fi

#    local tmpdir0=$(mktemp -d "${this}.tmp.XXXXXX" )
#    local tmpdirs=( "${tmpdirs[@]}" "${tmpdir0}" )
    local tmpfile0="$(mktemp   "${this}.tmp.XXXXXX")"
    local tmpfile1="$(mktemp   "${this}.tmp.XXXXXX")"
    local tmpfiles=( "${tmpfiles[@]}" "${tmpfile0}" "${tmpfile1}" )

    if [ ${verbose:-0} -ne 0 ]; then
        echo "------------------------------" 1>&2
        echo "Clean up directory: ${dest}"    1>&2
        echo "------------------------------" 1>&2
    fi

    if [ ! -d "${dest}" ]; then
        echo "\"${dest}\" is not directory" 1>&2 
        cleanup
        return 1
    fi
    
    ${FIND:-find} "${dest}" -maxdepth ${searchdepth} -type f 1> "${tmpfile0}" 2> /dev/null
    ${SED:-sed} ${sedopt:--E} -n -e 'h;s/.*\///g;/(\([1-9][0-9]*\)|-[1-9][0-9]*)(\.[^\(\-]*)?$/ {x;p;}' "${tmpfile0}" \
        | ${SORT:-sort} ${sortopt:--r -n} 1> "${tmpfile1}"
    local nfile=$(cat "${tmpfile1}" | wc -l )
    if [ ${verbose:-0} -ne 0 ]; then
        echo 'Total file == ' ${nfile} 1>&2
    fi
    while [ "${nfile}" -gt 0 ]; do
        local fname="$(head -n "${nfile}" "${tmpfile1}" | tail -1)"
        # echo "${nfile} : \"${fname}\""  1>&2
        local thisidx=$(echo "${fname}" | ${SED:-sed} ${sedopt:--E} -e 's/^.*(\([1-9][0-9]*\)|-[1-9][0-9]*)(\.[^\(\-]*)?$/\1/g' -e 's/[^0-9]//g')
        if [ ${thisidx:-1} -gt ${maxidx:-100} ]; then
            echo ${fname} ${thisidx} 1>&2
            echo "This index = ${thisidx:-1} is greater than ${maxidx:-100}" 1>&2
            echo "(${thisidx:-1}) is recognaized as a part of native file name: skipped: 1>&2"
            local nfile=$((--nfile))
            continue
        fi
        if [ ${verbose:-0} -ne 0 ]; then
            echo ${fname} ${thisidx} 1>&2
        fi
        while [ "${thisidx}" -gt 0 ]; do
            local thisidx=$((--thisidx)) || break
            if [ "${thisidx}" -gt 0 ]; then
                local cmpfile="$(echo "${fname}" | ${SED:-sed} ${sedopt:--E} -e "/\([1-9][0-9]*\)(\.[^\(\-]*)?$/ s/\([1-9][0-9]*\)((\.[^\(\-]*)?)$/\(${thisidx}\)\1/g" -e "/-[1-9][0-9]*(\.[^\-]*)?$/ s/-[1-9][0-9]*((\.[^\-]*)?)$/-${thisidx}\1/g" )"
            else
                local cmpfile="$(echo "${fname}" | ${SED:-sed} ${sedopt:--E} -e "/\([1-9][0-9]*\)(\.[^\(\-]*)?$/ s/\([1-9][0-9]*\)((\.[^\(\-]*)?)$/\1/g"               -e "/-[1-9][0-9]*(\.[^\-]*)?$/ s/-[1-9][0-9]*((\.[^\-]*)?)$/\1/g" )"
            fi
            if [ -z "${cmpfile}" -o ! -f "${cmpfile}" ]; then
                continue
            fi
            # echo ${cmpfile} 1>&2
            ${DIFF:-diff} ${diffopt:--qs} "${cmpfile}" "${fname}" || { [ ${verbose:-0} -ne 0 ] && ls -l "${cmpfile}" "${fname}" ; continue ; }
            if [ ${verbose:-0} -ne 0 ]; then
                ls -l "${cmpfile}" "${fname}"
            fi
            if [ ${dryrun:-0} -ne 0 -o ${verbose:-0} -ne 0 ] ; then
                echo "rm ${rmopt} \"${fname}\""  
            fi
            if [ ${dryrun:-0} -eq 0 ]; then
                rm ${rmopt} "${fname}" 
            fi
            break
        done
        local nfile=$((--nfile))
    done

    # clean up 
    cleanup
    return ${funcstatus}
}

if [ "$0" == ${BASH_SOURCE:-$0} ]; then
    cleanup_duplicated "$@"
fi
